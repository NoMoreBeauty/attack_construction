{
    "name": "Process Injection with Go using CreateThread WinAPI (Natively)",
    "description": "This program executes shellcode in the current process using the following steps 1. Allocate memory for the shellcode with VirtualAlloc setting the page permissions to Read/Write 2. Use the RtlCopyMemory macro to copy the shellcode to the allocated memory space 3. Change the memory page permissions to Execute/Read with VirtualProtect 4. Call CreateThread on shellcode address 5. Call WaitForSingleObject so the program does not end before the shellcode is executed  This program loads the DLLs and gets a handle to the used procedures itself instead of using the windows package directly.  - PoC Credit: (https://github.com/Ne0nd0g/go-shellcode#createthreadnative) ",
    "supported_platforms": [
        "windows"
    ],
    "executor": {
        "name": "powershell",
        "elevation_required": false,
        "command": "$PathToAtomicsFolder\\T1055\\bin\\x64\\CreateThreadNative.exe -debug\n",
        "cleanup_command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue\n",
        "type": "Command Executor"
    },
    "id": "T1055",
    "tactics": [
        "Privilege Escalation",
        "Defense Evasion"
    ],
    "technique": "Process Injection",
    "source": "ART",
    "uuid": "2a3c7035-d14f-467a-af94-933e49fe6786",
    "arguments": null,
    "preconditions": [],
    "infrastructure_requirement": [],
    "side": "Victim"
}