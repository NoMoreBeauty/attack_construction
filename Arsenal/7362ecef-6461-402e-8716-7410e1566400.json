{
    "name": "Process Injection with Go using EtwpCreateEtwThread WinAPI",
    "description": "Uses EtwpCreateEtwThread function from ntdll.dll to execute shellcode within the application's process. This program loads the DLLs and gets a handle to the used procedures itself instead of using the windows package directly.  Steps taken with this technique 1. Allocate memory for the shellcode with VirtualAlloc setting the page permissions to Read/Write 2. Use the RtlCopyMemory macro to copy the shellcode to the allocated memory space 3. Change the memory page permissions to Execute/Read with VirtualProtect 4. Call EtwpCreateEtwThread on shellcode address 5. Call WaitForSingleObject so the program does not end before the shellcode is executed  - PoC Credit: (https://github.com/Ne0nd0g/go-shellcode/tree/master#EtwpCreateEtwThread) - References:    - https://gist.github.com/TheWover/b2b2e427d3a81659942f4e8b9a978dc3   - https://www.geoffchappell.com/studies/windows/win32/ntdll/api/etw/index.htm ",
    "supported_platforms": [
        "windows"
    ],
    "executor": {
        "name": "powershell",
        "elevation_required": false,
        "command": "$PathToAtomicsFolder\\T1055\\bin\\x64\\EtwpCreateEtwThread.exe -debug\n",
        "cleanup_command": "Stop-Process -Name CalculatorApp -ErrorAction SilentlyContinue\n",
        "type": "Command Executor"
    },
    "id": "T1055",
    "tactics": [
        "Privilege Escalation",
        "Defense Evasion"
    ],
    "technique": "Process Injection",
    "source": "ART",
    "uuid": "7362ecef-6461-402e-8716-7410e1566400",
    "arguments": null,
    "preconditions": [],
    "infrastructure_requirement": [],
    "side": "Victim"
}